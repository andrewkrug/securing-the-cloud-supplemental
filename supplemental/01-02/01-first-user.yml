AWSTemplateFormatVersion : 2010-09-09
Description : Create the first user with a random password.
Parameters:
  Username:
    Type: String
    Description: The username of the user you are adding
    Default: donna.noble
Resources:
  CloudFormationLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        -
          PolicyName: AllowLambdaLogging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:*
                Resource: '*'
  DefaultPasswordGeneratorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Function used within CloudFormation to generate a default strong password for use in the AmazonMQ Broker
      Code:
        ZipFile: |
          import cfnresponse
          import secrets, string
          def handler(event, context):
            alphabet = string.ascii_letters + string.digits + '!@#$%^&*()_+`'
            password = ''.join(secrets.choice(alphabet) for i in range(int(event['ResourceProperties']['Length'])))
            physical_id = ''.join(secrets.choice(string.ascii_uppercase + string.digits) for i in range(13))
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Password': password}, "DefaultPasswordGenerator-%s" % physical_id)
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt CloudFormationLambdaIAMRole.Arn
      Tags:
        - Key: application
          Value: user-password-generator
      Timeout: 20
  DefaultPassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Length: 16
      ServiceToken: !GetAtt DefaultPasswordGeneratorLambdaFunction.Arn
  FirstUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref Username
      Groups:
        - "UnfederatedAdministrators"
        - "UnfederatedReadOnly"
        - "AllUsers"
        - "OrgAdminAccess"
      LoginProfile:
        Password:
          !GetAtt DefaultPassword.Password
        PasswordResetRequired: true
Outputs:
  UserPassword:
    Description: Password of the user we just created.
    Value: !GetAtt DefaultPassword.Password